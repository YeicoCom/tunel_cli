
show_help() {
    echo "Usage: tunel action ...args      "
    echo "    help                      - shows this help"
    echo "    update | bash             - pipe update commands to bash"
    echo "    setup                     - setup tunel services on this host"
    echo "    purge                     - purge tunel services from this host"
    echo "    status                    - shows wg status"
    echo "    login <email>             - login using email"
    echo "    logout                    - remove current session "
    echo "    list                      - list servers"
    echo "    register                  - register current host as server"
    echo "    config <name> <network>   - set this server's name and network"
    echo "                              - use @ to set the name to the hostname"
    echo "                              - use @ to clear the network value"
    echo "                              - use ^ as separator in a cidr"
    echo "    remove                    - remove this host's server"
    echo "    start <server_id>         - start a client to a server by its id "
    echo "    stop                      - stop the current running client"
}

asdf_update() {
    echo asdf uninstall tunel_cli main
    echo asdf plugin update tunel_cli
    echo asdf install tunel_cli main    
}

require_deps() {
    require_dep asdf
    require_dep curl   
    require_dep sed
    require_dep wget
    require_dep sudo
    require_dep unzip
    require_dep wg-quick
    require_dep uuidgen
    require_dep uname
    require_specials
    #FIXME how to check passwordless sudo
}

require_dir() {
    require_deps
    [ -d $DIR ] || panic "Setup first"
}

require_setup() {
    require_dir
    [ -f $DIR/host.uuid ] || panic Setup first
    [ -f $DIR/host.id ] || panic Setup first
    [ -f $YEICO_LINK ] || panic "Setup first"
}

require_session() {
    require_setup
    check_session || panic Not logged in
    echo Current session: $EMAIL
}

install_link() {
    asdf plugin add golang
    asdf install golang $GO_VERSION
    asdf local golang $GO_VERSION
    [ -f yeico_link-main.zip ] || wget https://yeico.com/dl/yeico_link-main.zip
    [ -d yeico_link-main ] || unzip yeico_link-main.zip
    cd yeico_link-main/
    go install
    cd ..
}

uninstall_link() {
    rm -f $YEICO_LINK
}

api_call_ok() {
    CALL=$1
    RESULT=$(no_error curl $API/$CALL)
    [ "$?" -eq "0" ] || panic API call $CALL failed
    [ "$RESULT" == "ok" ] || return 1
}

api_call_file() {
    CALL=$1
    FILE=$2
    no_error curl $API/$CALL > $FILE
    [ "$?" -eq "0" ] || panic API call $CALL failed
    RESULT=$(cat $FILE)
    [ "$RESULT" != "!invalid" ] || return 1
}

check_session() {
    [ -f $DIR/email ] || return 1
    [ -f $DIR/session ] || return 2
    EMAIL=$(cat $DIR/email)
    SESSION=$(cat $DIR/session)
    api_call_ok session/$EMAIL/$SESSION
}

login_otac() {
    EMAIL=$1
    echo $EMAIL > $DIR/email
    api_call_file login/$EMAIL $DIR/token
    TOKEN=$(cat $DIR/token)
    echo "A 6 digit access code has been sent to your inbox"
    echo -n "Access code: "
    read CODE
    api_call_file login/$EMAIL/$TOKEN/$CODE $DIR/session
}

add_session() {
    check_arg email $1
    EMAIL=$1
    [ -f $DIR/email ] && [ "$EMAIL" != "$(cat $DIR/email)" ] && panic Logout first
    check_session || login_otac $EMAIL
    check_session || panic Login failed
    echo Login success
}

delete_session() {    
    SESSION=$(cat $DIR/session)
    api_call_ok logout/$SESSION
    rm -fr $DIR/email
    rm -fr $DIR/session
    echo Logout success
}

list_servers() {
    no_error curl $API/list/$EMAIL/$SESSION
}

add_server() {
    [ -f $DIR/server.props ] && panic Server found
    HUUID=$(cat $DIR/host.uuid)
    api_call_file add/$EMAIL/$SESSION/$HUUID $DIR/server.props
    source $DIR/server.props
    echo enabled $STAMP > $DIR/server.link
    update_server @ @
}

update_server() {
    [ -f $DIR/server.props ] || panic Server not found
    source $DIR/server.props
    EMAIL=$(cat $DIR/email) #use logged user
    check_arg name $1
    check_arg network $2
    NAME=${1:-@}
    NETWORK=${2:-@}
    [ "$NAME" == "@" ] && NAME=$(hostname)
    api_call_ok update/$EMAIL/$SESSION/$SERID/$NAME/$NETWORK
    echo ok
}

delete_server() {
    [ -f $DIR/server.props ] || panic Server not found
    source $DIR/server.props
    EMAIL=$(cat $DIR/email) #use logged user
    HUUID=$(cat $DIR/host.uuid)
    control_service server stop
    no_error sudo wg-quick down $DIR/server_tmx.conf || true
    api_call_ok delete/$EMAIL/$SESSION/$SERID/$HUUID
    rm -fr $DIR/server.props
    rm -fr $DIR/server.link
    rm -fr $DIR/server_tmx.conf
    control_service server start
    echo ok
}

add_client() {
    HUUID=$(cat $DIR/host.uuid)
    check_arg server_id $1
    SHAID=$1
    api_call_file start/$EMAIL/$SESSION/$SHAID $DIR/client.props
    control_service client stop
    source $DIR/client.props
    echo enabled $STAMP > $DIR/client.link
    control_service client start
    echo ok
}

delete_client() {
    [ -f $DIR/client.props ] || panic Client not found
    source $DIR/client.props
    EMAIL=$(cat $DIR/email) #use logged user
    control_service client stop
    no_error sudo wg-quick down $DIR/client_tmx.conf || true
    #a client can always get started
    #this fails if remotelly replaced
    api_call_ok stop/$EMAIL/$SESSION/$SERID || true
    rm -fr $DIR/client.props
    rm -fr $DIR/client.link
    rm -fr $DIR/client_tmx.conf
    control_service client start
    echo ok
}

show_status() {
    [ -f $DIR/client.props ] || echo Client not found
    [ -f $DIR/client.props ] && source $DIR/client.props
    [ -f $DIR/client.props ] && echo Client $SERID
    [ -f $DIR/server.props ] || echo Server not found
    [ -f $DIR/server.props ] && source $DIR/server.props
    [ -f $DIR/server.props ] && echo Server $SERID $SUUID
    sudo wg
}
