#!/bin/bash -e

SCRIPT_PATH=$(dirname $BASH_SOURCE)
SCRIPT_PATH=$(realpath $SCRIPT_PATH)
cd $SCRIPT_PATH

API="https://dash.tunel.mx/api"
DIR=~/.tunelmx
source tmxe

panic() { 
    >&2 echo Panic: $@
    exit 1
}

no_output() {
    $@ 2>/dev/null >/dev/null
}

daemonize() {
    sudo $@ 2>/dev/null >/dev/null </dev/null &
}

no_error() {
    $@ 2>/dev/null
}

help() {
    this=$(basename $0)
    echo "Usage: $this action ...args"
    echo "$this help"
    echo "$this sessions"
    echo "$this login <email>"
    echo "$this logout <email>"
    echo "$this list_servers"
    echo "$this list_shares <server_id>"
    echo "$this add_server"
    echo "#use @ for empty name/network"
    echo "$this update_server <server_id> <name> <network>"
    echo "$this delete_server <server_id> <host_uuid>"
    echo "$this start_server"
    echo "$this stop_server"
    echo "$this share_server <server_id> <user_email>"
    echo "$this unshare_server <share_id>"
    echo "$this add_client <server_id>"
    echo "$this delete_client <server_id>"
    echo "$this start_client"
    echo "$this stop_client"
    exit 1
}

require() {
    CMD=$1
    shift
    no_output which $CMD || panic "$CMD is required $@"
}

check_deps() {
    #also requires passwordless sudo
    no_output mkdir -p $DIR/sessions
    require asdf
    require curl   
    require sed
    require wget
    require sudo
    require unzip
    require wg-quick
    [ -f $YEICO_LINK ] || install_link
    no_output sudo ls
}

install_link() {
    asdf plugin-add golang || true
    asdf install golang $GO_VERSION
    asdf local golang $GO_VERSION
    [ -f yeico_link-main.zip ] || wget https://yeico.com/dl/yeico_link-main.zip
    [ -d yeico_link-main ] || unzip yeico_link-main.zip
    cd yeico_link-main/
    go install
    cd ..
}

kill_pid_file() {
    pidf=${1:-}
    [ -n "$pidf" ] || panic Missing pid path
    if [ -f $pidf ]
    then
        pid=$(cat $pidf)
        [ -d /proc/$pid ] && no_output sudo kill $pid
        [ -d /proc/$pid ] || no_output sudo rm -f $pidf
    fi
}

check_default_session() {
    EMAIL=$(no_error cat $DIR/email)
    [ -f $DIR/sessions/$EMAIL ] || return 1
    check_session $EMAIL
}

panic_if_no_session() {
    check_default_session || panic Not logged in
    EMAIL=$(cat $DIR/email)
    TOKEN=$(cat $DIR/sessions/$EMAIL)
    echo Current session: $EMAIL
}

panic_if_arg_empty() {
    NAME=$1
    VALUE=$2
    [ "$VALUE" != "" ] || panic Argument \<$NAME\> is required
}

check_session() {
    EMAIL=$1
    FILE=$DIR/sessions/$EMAIL
    [ -f $FILE ] || return 1
    TOKEN=$(cat $FILE)
    RESULT=$(no_error curl $API/session/$EMAIL/$TOKEN)
    [ "$RESULT" == "ok" ] || return 1
    echo $EMAIL > $DIR/email
}

login_otac() {
    EMAIL=$1
    TOKEN=$(no_error curl $API/login/$EMAIL)
    echo "A 6 digit access has been sent to your inbox"
    echo -n "Code: "
    read CODE
    TOKEN=$(no_error curl $API/login/$EMAIL/$TOKEN/$CODE)
    FILE=$DIR/sessions/$EMAIL
    echo $TOKEN > $FILE
}

sessions() {
    EMAIL=$(no_error cat $DIR/email)
    for s in $(ls $DIR/sessions/*); do
        s=$(basename $s)
        [ "$EMAIL" == "$s" ] && echo -n '[x] '
        [ "$EMAIL" == "$s" ] || echo -n '[ ] '
        echo $s
    done
}

login() {
    panic_if_arg_empty email $1
    EMAIL=$1
    check_session $EMAIL || login_otac $EMAIL
    check_session $EMAIL || panic Login failed
    echo Login success
}

logout() {
    panic_if_arg_empty email $1
    EMAIL=$1
    FILE=$DIR/sessions/$EMAIL
    [ -f $FILE ] || panic Not logged in
    TOKEN=$(cat $FILE)
    RESULT=$(no_error curl $API/logout/$TOKEN)
    [ "$RESULT" == "ok" ] || panic Not logged in
    no_output rm -fr $FILE
    echo Logout success
}

list_servers() {
    no_error curl $API/list/$EMAIL/$TOKEN
}

list_shares() {
    panic_if_arg_empty server_id $1
    SERID=${1:-0}
    no_error curl $API/list/$EMAIL/$TOKEN/$SERID
}

add_server() {
    FOLDER=$DIR/server
    [ -f $FOLDER/host.uuid ] && panic Found server at $FOLDER
    no_output mkdir -p $FOLDER
    FILE=$FOLDER/server.props
    no_error curl $API/add/$EMAIL/$TOKEN > $FILE
    source $FILE
    sed -i.bak '/HUUID/d' $FILE
    echo $HUUID > $FOLDER/host.uuid
    echo ok
}

update_server() {
    panic_if_arg_empty server_id $1
    panic_if_arg_empty name $2
    panic_if_arg_empty network $3
    SERID=${1:-0}
    NAME=${2:-@}
    NETWORK=${3:-@}
    no_error curl $API/update/$EMAIL/$TOKEN/$SERID/$NAME/$NETWORK
}

delete_server() {
    panic_if_arg_empty server_id $1
    panic_if_arg_empty host_uuid $2
    SERID=${1:-0}
    SUUID=${2:-SUUID}
    no_error curl $API/delete/$EMAIL/$TOKEN/$SERID/$SUUID  
}

start_server() {
    FOLDER=$DIR/server
    [ -d $FOLDER ] || panic Local server not found $SERID
    [ -f $FOLDER/server.props ] || panic Local server not found $SERID
    [ -f $FOLDER/host.uuid ] || panic Local server not found $SERID
    [ -f $FOLDER/server.pid ] && kill_pid_file $FOLDER/server.pid
    cp tmxe $FOLDER/
    cp tmxs $FOLDER/
    sed -i.bak s,HOME=\$HOME,HOME=$HOME, $FOLDER/tmxe
    daemonize bash -c $FOLDER/tmxs
    echo "ok"
}

stop_server() {
    FOLDER=$DIR/server
    [ -d $FOLDER ] || panic Local server not found $SERID
    [ -f $FOLDER/server.pid ] && kill_pid_file $FOLDER/server.pid
    no_output sudo wg-quick down $FOLDER/server_tmx.conf || true
    echo "ok"
}

share_server() {
    panic_if_arg_empty server_id $1
    panic_if_arg_empty user_email $2
    SERID=$1
    USER=$2
    no_error curl $API/share/$EMAIL/$TOKEN/$SERID/$USER
}

unshare_server() {
    panic_if_arg_empty share_id $1
    SHAID=$1
    no_error curl $API/unshare/$EMAIL/$TOKEN/$SHAID
}

add_client() {
    panic_if_arg_empty server_id $1
    SHAID=$1
    FOLDER=$DIR/client
    [ -f $FOLDER/host.uuid ] && panic Found client at $FOLDER
    no_output mkdir -p $FOLDER
    FILE=$FOLDER/client.props
    no_error curl $API/start/$EMAIL/$TOKEN/$SHAID > $FILE
    source $FILE
    sed -i.bak '/HUUID/d' $FILE
    echo $HUUID > $FOLDER/host.uuid
    echo ok
}

delete_client() {
    panic_if_arg_empty server_id $1
    SHAID=$1
    no_error curl $API/stop/$EMAIL/$TOKEN/$SHAID
}

start_client() {
    FOLDER=$DIR/client
    [ -d $FOLDER ] || panic Local client not found $SERID
    [ -f $FOLDER/client.props ] || panic Local client not found $SERID
    [ -f $FOLDER/host.uuid ] || panic Local client not found $SERID
    [ -f $FOLDER/client.pid ] && kill_pid_file $FOLDER/client.pid
    cp tmxe $FOLDER/
    cp tmxc $FOLDER/
    sed -i.bak s,HOME=\$HOME,HOME=$HOME, $FOLDER/tmxe
    daemonize bash -c $FOLDER/tmxc
    echo "ok"
}

stop_client() {
    FOLDER=$DIR/client
    [ -d $FOLDER ] || panic Local client not found $SERID
    [ -f $FOLDER/client.pid ] && kill_pid_file $FOLDER/client.pid
    no_output sudo wg-quick down $FOLDER/client_tmx.conf || true
    echo "ok"
}

ACTION=$1

case $ACTION in
    update)
    this=$(basename $0)
    echo '#' $this update '|' bash
    echo asdf uninstall tunel_cli main
    echo asdf install tunel_cli main
    ;;
    sessions|login|logout)
    check_deps
    $@
    ;;
    list_servers|list_shares)
    check_deps
    panic_if_no_session
    $@
    ;;
    add_server|update_server|delete_server)
    check_deps
    panic_if_no_session
    $@
    ;;
    start_server|stop_server)
    check_deps
    $@
    ;;
    share_server|unshare_server)
    check_deps
    panic_if_no_session
    $@
    ;;
    add_client|delete_client)
    check_deps
    panic_if_no_session
    $@
    ;;
    start_client|stop_client)
    check_deps
    $@
    ;;
    *)
    help $@
    ;;
esac
