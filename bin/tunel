#!/bin/bash

cd_root() { 
    cd $(realpath $(dirname $0)) 
}

# FIXME howto to set color on macos
error_handler() { 
  local err=$?
  set +o xtrace
  local code="${1:-1}"
  echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $err"
  # Print out the stack trace described by $function_stack  
  if [ ${#FUNCNAME[@]} -gt 2 ]
  then
    echo "Call tree:"
    for ((i=1;i<${#FUNCNAME[@]}-1;i++))
    do
      echo " $i: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)"
    done
  fi
  echo "Exiting with status ${code}"
  exit "${code}"
}

set_strict() { 
    #-u causes $1: unbound variable
    set -oeE pipefail; 
    trap error_handler ERR; 
}

panic() { 
    >&2 echo Panic: $@
    exit 1
}

cd_root
set_strict

mkdir -p ~/.tunelmx
VERSION=$(cat ./version)
API="https://dash.tunel.mx/api"
DIR=$(realpath ~/.tunelmx)

case "$OSTYPE" in
    darwin*)  OSNAME="darwin" ;; 
    linux*)   OSNAME="linux" ;;
    *) panic "Unsupported OS: $OSTYPE" ;;
esac

source ./utils
source ./cross
source $OSNAME/tunel
source $OSNAME/tunel_environ

ACTION=$1
shift 

case $ACTION in
    update) require_deps; asdf_update $@ ;;
    setup) require_deps; setup_host $@ ;;
    purge) require_dir; purge_host $@ ;;
    login) require_setup; add_session $@ ;;
    logout) require_session; delete_session $@ ;;
    status) require_session; show_status ;;
    list) require_session; list_servers $@ ;;
    register) require_session; add_server $@ ;;
    config) require_session; update_server $@ ;;
    remove) require_session; delete_server $@ ;;
    start) require_session; add_client $@ ;;
    stop) require_session; delete_client $@ ;;
    help) show_help ;;
    *) panic "Invalid action $ACTION" ;;
esac
